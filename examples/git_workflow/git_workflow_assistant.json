{
  "agent": {
    "name": "Git Workflow Assistant",
    "description": "AI agent that validates staged files, performs thorough code reviews with LLM-specific issue detection, and generates commit messages through an interactive workflow",
    "version": "2.0.0",
    "goals": [
      "Validate staged files for size and type issues",
      "Infer the overall goal and purpose of code changes",
      "Perform file-by-file code review with focus on LLM-generated code issues",
      "Generate high-quality conventional commit messages",
      "Provide interactive workflow with multiple decision points"
    ],
    "capabilities": [
      "Staging validation with size and type analysis",
      "Goal inference from change patterns",
      "Comprehensive code quality review",
      "LLM code generation issue detection",
      "Security and performance analysis",
      "Interactive user decision points",
      "Commit message generation with revision support",
      "Review feedback file generation"
    ],
    "max_iterations": 30,
    "timeout": "25m",
    "interactive": true
  },
  "llm": {
    "provider": "deepinfra",
    "model": "deepseek-ai/DeepSeek-V3.1",
    "temperature": 0.3,
    "max_tokens": 4000,
    "system_prompt": "You are an expert software engineer and code reviewer specializing in detecting issues common in LLM-generated code. Your expertise includes:\n\n1. **Goal Inference**: Understanding the purpose and intent behind code changes\n2. **LLM Code Issues**: Identifying over-engineering, generic naming, incomplete implementations, and other AI-generated code problems\n3. **Code Quality**: Analyzing best practices, maintainability, and architectural soundness\n4. **Security & Performance**: Detecting vulnerabilities and performance bottlenecks\n5. **Conventional Commits**: Generating clear, well-structured commit messages\n\nBe thorough, specific, and actionable in your feedback. Focus on both immediate issues and long-term maintainability."
  },
  "data_sources": [
    {
      "name": "git_repository_info",
      "type": "file",
      "config": {
        "path": ".git/HEAD",
        "format": "text"
      },
      "preprocessing": [
        {
          "type": "validate",
          "config": {
            "max_size": "1KB"
          }
        }
      ]
    },
    {
      "name": "project_config",
      "type": "file", 
      "config": {
        "path": ".gitignore",
        "format": "text"
      }
    }
  ],
  "workflows": [
    {
      "name": "comprehensive_git_workflow",
      "description": "Complete git workflow: validation → thorough review → commit message generation",
      "steps": [
        {
          "name": "welcome_and_validation",
          "type": "display",
          "config": {
            "text": "# Git Workflow Assistant\n\nStarting quick code review and git commit helper for your staged changes..."
          },
          "timeout": "2s"
        },
        {
          "name": "get_staged_changes",
          "type": "tool",
          "config": {
            "tool": "shell_command",
            "params": {
              "command": "git diff --staged",
              "timeout": 30
            }
          },
          "depends_on": ["welcome_and_validation"],
          "timeout": "60s",
          "post_transforms": [
            {
              "source": "get_staged_changes.output",
              "transform": "extract_lines",
              "params": {
                "pattern": "^\\+.*",
                "mode": "count"
              },
              "store_as": "added_lines_count"
            },
            {
              "source": "get_staged_changes.output",
              "transform": "extract_lines",
              "params": {
                "pattern": "^\\-.*",
                "mode": "count"
              },
              "store_as": "deleted_lines_count"
            },
            {
              "source": "get_staged_changes.output",
              "transform": "regex_extract",
              "params": {
                "pattern": "diff --git a/([^ ]+) b/([^ ]+)",
                "mode": "all"
              },
              "store_as": "modified_files"
            }
          ]
        },
        {
          "name": "thorough_code_review",
          "type": "llm_with_tools",
          "config": {
            "prompt": "I am performing a code review and have access to tools to explore the codebase. I should verify my concerns by actually checking files before flagging issues.\n\n**Code Changes to Review:**\n```diff\n{get_staged_changes.output}\n```\n\n**My Approach:**\n1. **First, I'll analyze the diff** to identify potential concerns\n2. **Then, I'll use tools to verify** if issues actually exist or are handled elsewhere\n3. **Finally, I'll report only validated concerns** with evidence from the codebase\n\n**Available Actions:**\nWhen I identify potential issues, I can:\n- Read specific files to verify implementations\n- List directories to understand project structure  \n- Check for existing error handling, tests, or related code\n\n**What I'm Looking For:**\n- Code quality issues (naming, organization, error handling)\n- LLM generation problems (over-complexity, generic names, incomplete implementations)\n- Security and performance concerns\n- Missing tests or documentation\n- Breaking changes without proper migration\n\n**My Process:**\nI will examine the diff, then say things like:\n- \"Let me check if error handling exists in the related files...\"\n- \"I'll look at the existing test structure...\"\n- \"Let me verify if this functionality is implemented elsewhere...\"\n\nThis will trigger me to actually read files and verify my concerns before reporting issues.\n\nLet me start by analyzing the diff and then exploring the codebase as needed to provide an accurate review.",
            "tool_config": {
              "max_tool_calls": 5,
              "max_file_size": 8192,
              "fail_on_tool_error": false,
              "allowed_tools": ["read_file", "list_files"],
              "allowed_paths": ["pkg/", "cmd/", "examples/", "./pkg/", "./cmd/", "./examples/"]
            }
          },
          "depends_on": ["get_staged_changes"],
          "timeout": "10m"
        },
        {
          "name": "review_user_decision",
          "type": "tool",
          "config": {
            "tool": "ask_user",
            "params": {
              "question": "Proceed with commit (y/n) or save feedback to file and exit (s):",
              "default_response": "y"
            }
          },
          "depends_on": ["thorough_code_review"],
          "timeout": "300s"
        },
        {
          "name": "save_review_feedback",
          "type": "tool",
          "config": {
            "tool": "write_file",
            "params": {
              "path": "code-review-feedback.md",
              "content": "# Code Review Feedback\n\nGenerated on: {timestamp()}\n\n## Code Review Results\n{thorough_code_review}\n\n## Change Statistics\n- Files modified: {len(modified_files)} files\n- Lines added: {added_lines_count}\n- Lines deleted: {deleted_lines_count}\n- Net change: {subtract(added_lines_count, deleted_lines_count)} lines\n\n## Git Diff\n```diff\n{get_staged_changes.output}\n```\n\n---\n*This feedback was generated automatically by the Git Workflow Assistant*"
            }
          },
          "depends_on": ["review_user_decision"],
          "conditions": [
            {
              "field": "review_user_decision",
              "operator": "equals",
              "value": "s"
            }
          ],
          "timeout": "30s"
        },
        {
          "name": "generate_commit_message",
          "type": "llm",
          "config": {
            "prompt": "Generate a high-quality conventional commit message based on the code changes below:\n\n**Requirements:**\n1. **Follows conventional commit format**: `type(scope): description`\n2. **Uses appropriate type**: feat, fix, docs, style, refactor, test, chore, etc.\n3. **Has clear, concise subject** (≤50 characters)\n4. **Includes detailed body** explaining the 'why' not just the 'what'\n5. **References any breaking changes**\n\n**Change Statistics:**\n- Files modified: {len(modified_files)} files\n- Lines added: {added_lines_count}\n- Lines deleted: {deleted_lines_count}\n- Net change: {subtract(added_lines_count, deleted_lines_count)} lines\n- Has new files: {contains(get_staged_changes.output, 'new file')}\n- Has breaking changes: {contains(get_staged_changes.output, 'BREAKING CHANGE')}\n\n**Code Changes:**\n```diff\n{get_staged_changes.output}\n```\n\n**Instructions:**\n- Focus on WHAT was changed and WHY it was necessary\n- Be specific about the functionality or improvements added\n- Use imperative mood (\"add\" not \"added\" or \"adds\")\n- Keep the subject line under 50 characters\n- Provide context in the body about the motivation and impact\n\n**Generate the commit message in this format:**\n```\ntype(scope): short description\n\nDetailed explanation of changes:\n- Key changes made\n- Why these changes were necessary\n- Impact on the codebase\n\nStats: {len(modified_files)} files, +{added_lines_count}/-{deleted_lines_count} lines\n```"
          },
          "post_transforms": [
            {
              "source": "generate_commit_message",
              "transform": "string_process",
              "params": {
                "operation": "length"
              },
              "store_as": "commit_message_length"
            }
           ],
          "depends_on": ["review_user_decision"],
          "conditions": [
            {
              "field": "review_user_decision",
              "operator": "equals", 
              "value": "y"
            }
          ],
          "timeout": "2m",
          "retry_count": 1
        },
        {
          "name": "commit_message_user_decision",
          "type": "tool",
          "config": {
            "tool": "ask_user",
            "params": {
              "question": "## Proposed Commit Message\n\n{generate_commit_message}\n\n**Options:** Accept (y), Revise (r), or Cancel (n):",
              "default_response": "y"
            }
          },
          "depends_on": ["generate_commit_message"],
          "conditions": [
            {
              "field": "review_user_decision",
              "operator": "equals", 
              "value": "y"
            }
          ],
          "timeout": "300s"
        },
        {
          "name": "get_revision_feedback",
          "type": "tool",
          "config": {
            "tool": "ask_user",
            "params": {
              "question": "Please explain what should be different about the commit message. For example:\n- Different type or scope\n- Different emphasis in the description\n- Missing details in the body\n- Different tone or style\n\nI'll use your feedback to generate an improved version.",
              "default_response": "The commit message looks good."
            }
          },
          "depends_on": ["commit_message_user_decision"],
          "conditions": [
            {
              "field": "commit_message_user_decision",
              "operator": "equals", 
              "value": "r"
            }
          ],
          "timeout": "180s"
        },
        {
          "name": "regenerate_commit_message",
          "type": "llm",
          "config": {
            "prompt": "Based on the user's feedback, generate an improved commit message that addresses their concerns while maintaining conventional commit format and quality standards."
          },
          "depends_on": ["get_revision_feedback"],
          "conditions": [
            {
              "field": "commit_message_user_decision",
              "operator": "equals", 
              "value": "r"
            }
          ],
          "timeout": "2m",
          "retry_count": 1
        },
        {
          "name": "execute_commit",
          "type": "tool",
          "config": {
            "tool": "git_commit",
            "params": {
              "message": "Execute the git commit with the approved message. Use the git_commit tool to create the commit and provide confirmation of successful completion including the commit hash."
            }
          },
          "depends_on": ["commit_message_user_decision"],
          "conditions": [
            {
              "field": "commit_message_user_decision",
              "operator": "equals", 
              "value": "y"
            }
          ],
          "timeout": "30s"
        }
      ]
    }
  ],
  "tools": {
    "read_file": {
      "enabled": true,
      "timeout": "30s",
      "description": "Read contents of a file to validate implementation details"
    },
    "list_files": {
      "enabled": true,
      "timeout": "30s",
      "description": "List files in a directory to explore codebase structure"
    },
    "shell_command": {
      "enabled": true,
      "timeout": "60s",
      "description": "Execute shell commands for codebase exploration (grep, find, etc.)"
    },
    "git_diff": {
      "enabled": true,
      "timeout": "60s",
      "description": "Get git diff for staged changes"
    },
    "git_status": {
      "enabled": true,
      "timeout": "30s", 
      "description": "Check git repository status"
    },
    "git_commit": {
      "enabled": true,
      "timeout": "30s",
      "description": "Execute git commit with message"
    },
    "write_file": {
      "enabled": true,
      "timeout": "30s",
      "description": "Write content to files"
    },
    "ask_user": {
      "enabled": true,
      "timeout": "300s",
      "description": "Interactive user input and approval"
    },
    "validate_input": {
      "enabled": true,
      "timeout": "10s",
      "description": "Validate user input format"
    }
  },
  "output": {
    "format": "structured",
    "fields": {
      "review_summary": "string",
      "issues_found": "array",
      "commit_message": "string", 
      "commit_hash": "string",
      "user_decisions": "object",
      "workflow_status": "string"
    },
    "destination": "stdout"
  },
  "budget": {
    "max_tokens": 150000,
    "max_cost": 1.50,
    "warn_at_percentage": 80
  },
  "security": {
    "allowed_paths": [".git/", "./"],
    "allowed_commands": ["bash", "git", "ls", "cat"],
    "max_file_size": "1MB"
  }
}