{
  "agent": {
    "name": "Git Workflow Assistant",
    "description": "AI agent that validates staged files, performs thorough code reviews with LLM-specific issue detection, and generates commit messages through an interactive workflow",
    "version": "2.0.0",
    "goals": [
      "Validate staged files for size and type issues",
      "Infer the overall goal and purpose of code changes",
      "Perform file-by-file code review with focus on LLM-generated code issues",
      "Generate high-quality conventional commit messages",
      "Provide interactive workflow with multiple decision points"
    ],
    "capabilities": [
      "Staging validation with size and type analysis",
      "Goal inference from change patterns",
      "Comprehensive code quality review",
      "LLM code generation issue detection",
      "Security and performance analysis",
      "Interactive user decision points",
      "Commit message generation with revision support",
      "Review feedback file generation"
    ],
    "max_iterations": 30,
    "timeout": "25m",
    "interactive": true
  },
  "llm": {
    "provider": "deepinfra",
    "model": "deepseek-ai/DeepSeek-V3.1",
    "temperature": 0.3,
    "max_tokens": 4000,
    "system_prompt": "You are an expert software engineer and code reviewer specializing in detecting issues common in LLM-generated code. Your expertise includes:\n\n1. **Goal Inference**: Understanding the purpose and intent behind code changes\n2. **LLM Code Issues**: Identifying over-engineering, generic naming, incomplete implementations, and other AI-generated code problems\n3. **Code Quality**: Analyzing best practices, maintainability, and architectural soundness\n4. **Security & Performance**: Detecting vulnerabilities and performance bottlenecks\n5. **Conventional Commits**: Generating clear, well-structured commit messages\n\nBe thorough, specific, and actionable in your feedback. Focus on both immediate issues and long-term maintainability."
  },
  "data_sources": [
    {
      "name": "git_repository_info",
      "type": "file",
      "config": {
        "path": ".git/HEAD",
        "format": "text"
      },
      "preprocessing": [
        {
          "type": "validate",
          "config": {
            "max_size": "1KB"
          }
        }
      ]
    },
    {
      "name": "project_config",
      "type": "file", 
      "config": {
        "path": ".gitignore",
        "format": "text"
      }
    }
  ],
  "workflows": [
    {
      "name": "comprehensive_git_workflow",
      "description": "Complete git workflow: validation ‚Üí thorough review ‚Üí commit message generation",
      "steps": [
        {
          "name": "welcome_and_validation",
          "type": "tool",
          "config": {
            "tool": "ask_user",
            "params": {
              "question": "# Git Workflow Assistant\n\nWelcome! I'm your AI Git Workflow Assistant. I will help you create high-quality commits through:\n\nüìã **1. Staging Validation** - Check file sizes, types, and overall staging health\nüîç **2. Goal Inference** - Understand what your changes are trying to achieve\nüìù **3. Code Review** - Thorough analysis including LLM-generated code issues\nüí¨ **4. Interactive Decisions** - You control the workflow at key points\nüìÑ **5. Commit Message** - Generate conventional commit messages\n‚úÖ **6. Final Commit** - Execute with your approval\n\n## Ready to Start?\n\n**Options:**\n- **y** - Begin staging validation and code review\n- **n** - Exit workflow\n\n**Please type 'y' or 'n':**"
            }
          },
          "timeout": "300s"
        },


        {
          "name": "get_staged_changes",
          "type": "tool",
          "config": {
            "tool": "shell_command",
            "params": {
              "command": "git diff --staged",
              "timeout": 30
            }
          },
          "depends_on": ["welcome_and_validation"],
          "timeout": "60s",
          "post_transforms": [
            {
              "source": "get_staged_changes.output",
              "transform": "extract_lines",
              "params": {
                "pattern": "^\\+.*",
                "mode": "count"
              },
              "store_as": "added_lines_count"
            },
            {
              "source": "get_staged_changes.output",
              "transform": "extract_lines",
              "params": {
                "pattern": "^\\-.*",
                "mode": "count"
              },
              "store_as": "deleted_lines_count"
            },
            {
              "source": "get_staged_changes.output",
              "transform": "regex_extract",
              "params": {
                "pattern": "diff --git a/([^ ]+) b/([^ ]+)",
                "mode": "all"
              },
              "store_as": "modified_files"
            }
          ]
        },
        {
          "name": "infer_change_goals",
          "type": "llm",
          "config": {
            "prompt": "First, analyze the full set of staged changes to understand the overall goal and purpose of this commit. Look at:\n\n1. **What is the main objective?** (feature, fix, refactor, etc.)\n2. **What problem is being solved?**\n3. **How do the files work together?**\n4. **What is the scope and impact?**\n\nBased on the staged git diff shown below, provide a clear, concise summary of what this commit is trying to achieve:\n\n**Git Diff Output:**\n{get_staged_changes.output}\n\n**Analysis Instructions:**\n- Focus on the actual code changes, not just file names\n- Identify the type of changes: additions (+), deletions (-), modifications\n- Determine if this is a feature, fix, refactor, docs update, etc.\n- Assess the scope and potential impact\n\nProvide a clear, concise summary of what this commit is trying to achieve based on the actual code changes."
          },
          "depends_on": ["get_staged_changes"],
          "timeout": "2m"
        },
        {
          "name": "thorough_code_review",
          "type": "llm_display",
          "config": {
            "prompt": "Now perform a thorough file-by-file code review based on the actual code changes below. For each changed file, analyze:\n\n**Code Quality & Best Practices:**\n- Naming conventions and code organization\n- Function/method design and single responsibility\n- Error handling and edge cases\n- Code readability and maintainability\n\n**LLM Code Generation Issues (specifically look for):**\n- Over-complicated or verbose implementations\n- Unnecessary abstractions or patterns\n- Missing or inadequate error handling\n- Generic variable/function names\n- Incomplete implementations or TODOs\n- Copy-paste patterns without customization\n- Missing input validation\n- Hardcoded values that should be configurable\n\n**Security & Performance:**\n- Potential security vulnerabilities\n- Performance bottlenecks or inefficiencies\n- Resource management (memory, connections, etc.)\n\n**Testing & Documentation:**\n- Missing tests for new functionality\n- Insufficient documentation or comments\n- Breaking changes that need migration notes\n\n**Change Statistics (Auto-Extracted):**\n- Files modified: {len(modified_files)} files\n- Lines added: {added_lines_count} additions\n- Lines deleted: {deleted_lines_count} deletions\n- Net change: {subtract(added_lines_count, deleted_lines_count)} lines\n- Change summary: {infer_change_goals}\n\n**Code Changes to Review:**\n```diff\n{get_staged_changes.output}\n```\n\n**Review Instructions:**\n1. Analyze each file modification individually\n2. Look for patterns across multiple files\n3. Consider the overall change context from the goal analysis\n4. Use the change statistics to understand scope\n5. Provide specific line-by-line feedback where needed\n6. Highlight any critical issues that should block the commit\n\nProvide specific, actionable feedback with line references where applicable."
          },
          "depends_on": ["infer_change_goals"],
          "timeout": "5m"
        },

        {
          "name": "review_user_decision",
          "type": "tool",
          "config": {
            "tool": "ask_user",
            "params": {
              "question": "## Code Review Complete\n\nI've completed a thorough analysis of your staged changes as shown above.\n\n**What would you like to do next?**\n\n**Options:**\n- **y** - Proceed to commit message generation\n- **r** - Save the review feedback to a markdown file for later reference\n- **n** - Cancel the commit process to address issues first\n\n**Please type 'y', 'r', or 'n':**"
            }
          },
          "depends_on": ["thorough_code_review"],
          "timeout": "300s"
        },
        {
          "name": "save_review_feedback",
          "type": "tool",
          "config": {
            "tool": "write_file",
            "params": {
              "path": "code-review-feedback.md",
              "content": "# Code Review Feedback\n\n## Goal Analysis\nThe LLM has analyzed your code changes to understand the overall goal and purpose.\n\n## Code Quality Review\nFile-by-file analysis has been completed covering naming conventions, design patterns, error handling, and maintainability.\n\n## Security & Performance Analysis\nAnalysis completed for potential vulnerabilities, bottlenecks, and resource management.\n\n## Recommendations\nPlease refer to the detailed LLM analysis output above for specific recommendations and actionable feedback."
            }
          },
          "depends_on": ["review_user_decision"],
          "timeout": "30s"
        },
        {
          "name": "generate_commit_message",
          "type": "llm_display",
          "config": {
            "prompt": "Based on the code review analysis and user feedback, generate a high-quality conventional commit message that:\n\n1. **Follows conventional commit format**: `type(scope): description`\n2. **Uses appropriate type**: feat, fix, docs, style, refactor, test, chore, etc.\n3. **Has clear, concise subject** (‚â§50 characters)\n4. **includes detailed body** explaining the 'why' not just the 'what'\n5. **References any breaking changes**\n\n**Enhanced Context Analysis (Auto-Generated):**\n- Change Goal: {infer_change_goals}\n- Review Analysis: {thorough_code_review}\n- User Decision: {review_user_decision}\n\n**Change Statistics:**\n- Files modified: {len(modified_files)} files\n- Lines added: {added_lines_count}\n- Lines deleted: {deleted_lines_count}\n- Net change: {subtract(added_lines_count, deleted_lines_count)} lines\n- Has new files: {contains(get_staged_changes.output, 'new file')}\n- Has breaking changes: {contains(thorough_code_review, 'breaking')}\n\n**Generate the commit message in this format:**\n```\ntype(scope): short description\n\nDetailed explanation of changes:\n- Key changes made\n- Why these changes were necessary\n- Impact on the codebase\n\nStats: {len(modified_files)} files, +{added_lines_count}/-{deleted_lines_count} lines\n```"
          },
          "post_transforms": [
            {
              "source": "generate_commit_message",
              "transform": "string_process",
              "params": {
                "operation": "length"
              },
              "store_as": "commit_message_length"
            }
          ],
          "depends_on": ["review_user_decision"],
          "timeout": "2m",
          "retry_count": 1
        },
        {
          "name": "commit_message_user_decision",
          "type": "tool",
          "config": {
            "tool": "ask_user",
            "params": {
              "question": "## Proposed Commit Message\n\nI've generated a conventional commit message based on the code analysis above. Please review the proposed message.\n\n**What would you like to do?**\n\n**Options:**\n- **y** - Accept the message and execute the git commit\n- **r** - Explain what should be different and I'll generate a new message\n- **n** - Cancel the commit process\n\n**Please type 'y', 'r', or 'n':**"
            }
          },
          "depends_on": ["generate_commit_message"],
          "timeout": "300s"
        },
        {
          "name": "get_revision_feedback",
          "type": "tool",
          "config": {
            "tool": "ask_user",
            "params": {
              "question": "Please explain what should be different about the commit message. For example:\n- Different type or scope\n- Different emphasis in the description\n- Missing details in the body\n- Different tone or style\n\nI'll use your feedback to generate an improved version."
            }
          },
          "depends_on": ["commit_message_user_decision"],
          "timeout": "180s"
        },
        {
          "name": "regenerate_commit_message",
          "type": "llm",
          "config": {
            "prompt": "Based on the user's feedback, generate an improved commit message that addresses their concerns while maintaining conventional commit format and quality standards."
          },
          "depends_on": ["get_revision_feedback"],
          "timeout": "2m",
          "retry_count": 1
        },
        {
          "name": "execute_commit",
          "type": "tool",
          "config": {
            "tool": "git_commit",
            "params": {
              "message": "Execute the git commit with the approved message. Use the git_commit tool to create the commit and provide confirmation of successful completion including the commit hash."
            }
          },
          "depends_on": ["commit_message_user_decision"],
          "timeout": "30s"
        }
      ]
    }
  ],
  "tools": {
    "git_diff": {
      "enabled": true,
      "timeout": "60s",
      "description": "Get git diff for staged changes"
    },
    "git_status": {
      "enabled": true,
      "timeout": "30s", 
      "description": "Check git repository status"
    },
    "git_commit": {
      "enabled": true,
      "timeout": "30s",
      "description": "Execute git commit with message"
    },
    "execute_script": {
      "enabled": true,
      "timeout": "120s",
      "description": "Execute shell scripts with security validation"
    },
    "write_file": {
      "enabled": true,
      "timeout": "30s",
      "description": "Write content to files"
    },
    "ask_user": {
      "enabled": true,
      "timeout": "300s",
      "description": "Interactive user input and approval"
    },
    "validate_input": {
      "enabled": true,
      "timeout": "10s",
      "description": "Validate user input format"
    }
  },
  "output": {
    "format": "structured",
    "fields": {
      "review_summary": "string",
      "issues_found": "array",
      "commit_message": "string", 
      "commit_hash": "string",
      "user_decisions": "object",
      "workflow_status": "string"
    },
    "destination": "stdout"
  },
  "budget": {
    "max_tokens": 50000,
    "max_cost": 10.00,
    "warn_at_percentage": 80
  },
  "security": {
    "allowed_paths": [".git/", "./"],
    "allowed_commands": ["bash", "git", "ls", "cat"],
    "max_file_size": "1MB"
  }
}